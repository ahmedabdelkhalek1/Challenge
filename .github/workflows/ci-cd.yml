name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

  workflow_dispatch:

env:
  PROJECT_ID: artful-fragment-458014-j4
  REGION: us-east1
  WORKLOAD_IDENTITY_PROVIDER: projects/447195453845/locations/global/workloadIdentityPools/github-actions-pool/providers/devoteam-challenge
  SERVICE_ACCOUNT: gke-terraform-service-account@artful-fragment-458014-j4.iam.gserviceaccount.com
  WORKING_DIR: infra/environment
  CLUSTER_NAME: private-gke-cluster
  CLUSTER_LOCATION : us-east1
  REPOSITORY: demo-app
  IMAGE: demo-app
  DEPLOYMENT_NAME: demo-app

permissions:
  contents: read
  id-token: write # Required for requesting the JWT

jobs:
  authenticate:
    name: GCP Authentication
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      auth_status: ${{ steps.auth.outputs.auth_status || 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          project_id:                ${{ env.PROJECT_ID }}
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}

  terraform-checks:
    name: Terraform Init & Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    needs: authenticate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          project_id:                ${{ env.PROJECT_ID }}
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}
          
      - name: Terraform Cleanup
        run: rm -rf .terraform
        
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: infra
        
      - name: Initialize Terraform
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: Validate Terraform Configuration
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: Terraform Configuration Plan Report
        run: terraform plan
        working-directory: ${{ env.WORKING_DIR }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-checks
    environment: production  # Add environment for approval
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          project_id:                ${{ env.PROJECT_ID }}
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}
          
      - name: Initialize Terraform
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: Confirm Infrastructure Deployment
        run: |
          echo "Infrastructure deployment completed successfully!"
      
        
  test-apps:
    name: Test the app
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r DevOps-Challenge-Demo-Code/requirements.txt
  
      - name: Run tests
        run: |
          python DevOps-Challenge-Demo-Code/tests/test.py

  build-and-push:
      needs: test-apps
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main'
      outputs:
        image-tag: ${{ steps.build.outputs.image-tag }}
      steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          project_id:                ${{ env.PROJECT_ID }}
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}
  
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
  
      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ env.CLUSTER_LOCATION }}-docker.pkg.dev
  
      - name: Create Artifact Registry repository if it doesn't exist
        run: |
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.CLUSTER_LOCATION }} \
            --description="Docker repository for DevOps Challenge" || true
  
      - name: Build and push Docker image
        id: build
        working-directory: DevOps-Challenge-Demo-Code
        run: |
          IMAGE_TAG=${{ env.CLUSTER_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${GITHUB_SHA}
          IMAGE_TAG_LATEST=${{ env.CLUSTER_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:latest
          
          docker build -t $IMAGE_TAG -t $IMAGE_TAG_LATEST .
          docker push $IMAGE_TAG
          docker push $IMAGE_TAG_LATEST
          
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-applications:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production  # Add environment for approval
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          project_id:                ${{ env.PROJECT_ID }}
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ env.SERVICE_ACCOUNT }}

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          project_id:   ${{ env.PROJECT_ID }}
          cluster_name: ${{ env.CLUSTER_NAME }}
          location:     ${{ env.CLUSTER_LOCATION }}
  
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Create namespace if it doesn't exist
        run: |
          kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Redis
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          helm upgrade --install redis bitnami/redis \
            --namespace production \
            --set auth.enabled=false \
            --set architecture=standalone \
            --set master.persistence.enabled=false \
            --wait

      - name: Deploy application with Helm
        # Remove working-directory to run from repo root
        run: |
          helm upgrade --install ${{ env.DEPLOYMENT_NAME }}  ./charts/demo-app \
            --namespace production \
            --set image.repository=${{ env.CLUSTER_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }} \
            --set image.tag=latest \
            --set redis.host=redis-master \
            --wait \
            --debug

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/$DEPLOYMENT_NAME --namespace production --timeout=300s
          kubectl get services --namespace production
          
    
      # - name: Google Auth
      #   uses: google-github-actions/auth@v2
      #   with:
      #     project_id:                ${{ env.PROJECT_ID }}
      #     workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
      #     service_account:            ${{ env.SERVICE_ACCOUNT }}
      # - name: Set up GKE credentials
      #   uses: google-github-actions/get-gke-credentials@v2
      #   with:
      #     project_id:   ${{ env.PROJECT_ID }}
      #     cluster_name: ${{ env.CLUSTER_NAME }}
      #     location:     ${{ env.CLUSTER_LOCATION }}

      
  
          
  notification:
    name: Failed pipeline notification
    runs-on: ubuntu-latest
    needs: [terraform-checks, test-apps, deploy-infrastructure, deploy-applications, build-and-push]
    if: ${{ always() && (contains(join(needs.*.result, ','), 'failure') || contains(join(needs.*.result,','), 'cancelled')) }}
    steps:
      - name: Notify on Slack
        run: echo "Sending  message about failed pipeline..."
  


